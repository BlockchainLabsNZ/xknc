{
  "language": "Solidity",
  "sources": {
    "contracts/interface/IKyberDAO.sol": {
      "content": "pragma solidity 0.5.15;\n\ncontract IKyberDAO {\n    function vote(uint256 campaignID, uint256 option) external;\n}"
    },
    "contracts/interface/IKyberFeeHandler.sol": {
      "content": "pragma solidity 0.5.15;\n\ncontract IKyberFeeHandler {\n    function claimStakerReward(\n        address staker,\n        uint256 epoch\n    ) external returns(uint256 amountWei);\n}"
    },
    "contracts/interface/IKyberNetworkProxy.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract IKyberNetworkProxy {\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint);\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minRate) external returns(uint);\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interface/IKyberStaking.sol": {
      "content": "pragma solidity 0.5.15;\n\ncontract IKyberStaking {\n    function deposit(uint256 amount) external;\n    function withdraw(uint256 amount) external;\n    function getLatestStakeBalance(address staker) external view returns(uint);\n}"
    },
    "contracts/Migrations.sol": {
      "content": "pragma solidity >=0.4.22 <0.7.0;\n\n\ncontract Migrations {\n    address public owner;\n    uint256 public last_completed_migration;\n\n    modifier restricted() {\n        if (msg.sender == owner) _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setCompleted(uint256 completed) public restricted {\n        last_completed_migration = completed;\n    }\n\n    function upgrade(address new_address) public restricted {\n        Migrations upgraded = Migrations(new_address);\n        upgraded.setCompleted(last_completed_migration);\n    }\n}\n"
    },
    "contracts/mock/MockKNC.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockKNC is ERC20 {\n    constructor() public {\n        _mint(msg.sender, 1000e18);\n    }\n\n    \n}"
    },
    "contracts/mock/MockKyberDAO.sol": {
      "content": "pragma solidity 0.5.15;\n\n\ncontract MockKyberDAO {\n    function vote(uint campaignID, uint option) external {\n        // \n    }\n\n    function claimReward(address staker, uint epoch) external {\n        // \n        msg.sender.transfer(1e16);\n    }\n\n    function() external payable {\n\n    }\n}"
    },
    "contracts/mock/MockKyberFeeHandler.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MockKyberFeeHandler {\n\n    function claimStakerReward(address _address, uint _epoch) external returns(uint ethBal) {\n        ethBal = address(this).balance;\n        msg.sender.call.value(ethBal);\n    }\n\n    function() external payable {\n\n    }\n}"
    },
    "contracts/mock/MockKyberNetworkProxy.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract MockKyberNetworkProxy {\n    using SafeMath for uint256;\n\n    address private kncAddress;\n    // ETH = $200\n    // KNC = $1\n    address private ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate) {\n        if (src == ERC20(ETH_ADDRESS) && dest == ERC20(kncAddress)){\n            return (200e18, 200e18);\n        }\n    }\n\n    // swap ether to knc\n    // must send knc to contract first\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint) {\n        uint kncToSend = msg.value.mul(200e18).div(1e18);\n        IERC20(kncAddress).transfer(msg.sender, kncToSend);\n    }\n\n    // swap knc to ether\n    // must send eth to contract first\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint) {\n        uint ethToSend = tokenQty.div(200);\n        msg.sender.transfer(ethToSend);\n    }\n\n\n    // swap tokem to knc\n    // must send knc to contract first\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minRate) external returns(uint) {\n        uint kncToSend = 1000000000;\n        IERC20(kncAddress).transfer(msg.sender, kncToSend);\n    }\n\n    function setKncAddress(address _kncAddress) public {\n        kncAddress = _kncAddress;\n    }\n}"
    },
    "contracts/mock/MockKyberStaking.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MockKyberStaking {\n    address kncAddress;\n\n    // need to approve first\n    function deposit(uint amount) external {\n        IERC20(kncAddress).transferFrom(msg.sender, address(this), amount);\n    }\n\n    function withdraw(uint amount) external {\n        IERC20(kncAddress).transfer(msg.sender, amount);\n    }\n\n    function setKncAddress(address _kncAddress) public {\n        kncAddress = _kncAddress;\n    }\n\n    function getLatestStakeBalance(address _address) public returns(uint) {\n        return IERC20(kncAddress).balanceOf(address(this));\n    }\n}"
    },
    "contracts/mock/MockToken.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockToken is ERC20 {\n    constructor() public {\n        _mint(msg.sender, 1000e18);\n    }\n    \n}"
    },
    "contracts/mock/MockTokenKyberFeeHandler.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MockTokenKyberFeeHandler {\n    IERC20 feeToken;\n\n    constructor(address _tokenAddress) public {\n        feeToken = IERC20(_tokenAddress);\n    }\n\n    function claimStakerReward(address _address, uint _epoch) external returns(uint tokenBal) {\n        tokenBal = feeToken.balanceOf(address(this));\n        feeToken.transfer(msg.sender, tokenBal);\n    }\n\n    function() external payable {\n\n    }\n}"
    },
    "contracts/util/Whitelist.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\n\ncontract Whitelist is Ownable {\n\tmapping(address => bool) whitelist;\n\tevent AddedToWhitelist(address indexed account);\n\tevent RemovedFromWhitelist(address indexed account);\n\n\tfunction addToWhitelist(address _address) public onlyOwner {\n\t\twhitelist[_address] = true;\n\t\temit AddedToWhitelist(_address);\n\t}\n\n\tfunction removefromWhitelist(address _address) public onlyOwner {\n\t\twhitelist[_address] = false;\n\t\temit RemovedFromWhitelist(_address);\n\t}\n\n\tfunction isWhitelisted(address _address) public view returns (bool) {\n\t\treturn whitelist[_address];\n\t}\n}\n"
    },
    "@openzeppelin/contracts/ownership/Ownable.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/xKNC.sol": {
      "content": "pragma solidity 0.5.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"@openzeppelin/contracts/lifecycle/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./util/Whitelist.sol\";\nimport \"./interface/IKyberNetworkProxy.sol\";\nimport \"./interface/IKyberStaking.sol\";\nimport \"./interface/IKyberDAO.sol\";\nimport \"./interface/IKyberFeeHandler.sol\";\n\n\n/*\n * xKNC KyberDAO Pool Token\n * Communal Staking Pool with Stated Governance Position\n */\n\ncontract xKNC is ERC20, ERC20Detailed, Whitelist, Pausable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    IERC20 public knc;\n    IKyberDAO public kyberDao;\n    IKyberStaking public kyberStaking;\n    IKyberNetworkProxy public kyberProxy;\n    IKyberFeeHandler[] public kyberFeeHandlers;\n\n    address[] private kyberFeeTokens;\n\n    uint256 constant PERCENT = 100;\n    uint256 constant MAX_UINT = 2**256 - 1;\n    uint256 constant INITIAL_SUPPLY_MULTIPLIER = 10;\n\n    uint256[] public feeDivisors;\n    uint256 private withdrawableEthFees;\n    uint256 private withdrawableKncFees;\n\n    string public mandate;\n\n    mapping(address => bool) fallbackAllowedAddress;\n\n    event MintWithEth(\n        address indexed user,\n        uint256 ethPayable,\n        uint256 mintAmount,\n        uint256 timestamp\n    );\n    event MintWithKnc(\n        address indexed user,\n        uint256 kncPayable,\n        uint256 mintAmount,\n        uint256 timestamp\n    );\n    event Burn(\n        address indexed user,\n        bool redeemedForKnc,\n        uint256 burnAmount,\n        uint256 timestamp\n    );\n    event FeeWithdraw(uint256 ethAmount, uint256 kncAmount, uint256 timestamp);\n    event FeeDivisorsSet(uint256[] divisors);\n    event EthRewardClaimed(uint256 amount, uint256 timestamp);\n    event TokenRewardClaimed(uint256 amount, uint256 timestamp);\n\n    enum FeeTypes {MINT, BURN, CLAIM}\n\n    constructor(\n        string memory _mandate,\n        address _kyberStakingAddress,\n        address _kyberProxyAddress,\n        address _kyberTokenAddress,\n        address _kyberDaoAddress\n    ) public ERC20Detailed(\"xKNC\", \"xKNCa\", 18) {\n        mandate = _mandate;\n        kyberStaking = IKyberStaking(_kyberStakingAddress);\n        kyberProxy = IKyberNetworkProxy(_kyberProxyAddress);\n        knc = IERC20(_kyberTokenAddress);\n        kyberDao = IKyberDAO(_kyberDaoAddress);\n\n        _addFallbackAllowedAddress(_kyberProxyAddress);\n    }\n\n    /*\n     * @notice Called by users buying with ETH\n     * @dev Swaps ETH for KNC, deposits to Staking contract\n     * @dev: Mints pro rata xKNC tokens\n     * @param: kyberProxy.getExpectedRate(eth => knc)\n     */\n    function _mint(uint256 minRate) external payable whenNotPaused {\n        require(msg.value > 0, \"Must send eth with tx\");\n        // ethBalBefore checked in case of eth still waiting for exch to KNC\n        uint256 ethBalBefore = getFundEthBalance().sub(msg.value);\n        uint256 fee = _administerEthFee(FeeTypes.MINT, ethBalBefore);\n\n        uint256 ethValueForKnc = msg.value.sub(fee);\n        uint256 kncBalanceBefore = getFundKncBalance();\n\n        _swapEtherToToken(address(knc), ethValueForKnc, minRate);\n        _deposit(getAvailableKncBalance());\n\n        uint256 mintAmount = _calculateMintAmount(kncBalanceBefore);\n\n        emit MintWithEth(msg.sender, msg.value, mintAmount, block.timestamp);\n        return super._mint(msg.sender, mintAmount);\n    }\n\n    /*\n     * @notice Called by users buying with KNC\n     * @notice Users must submit ERC20 approval before calling\n     * @dev Deposits to Staking contract\n     * @dev: Mints pro rata xKNC tokens\n     * @param: Number of KNC to contribue\n     */\n    function _mintWithKnc(uint256 kncAmount) external whenNotPaused {\n        require(kncAmount > 0, \"Must contribute KNC\");\n        knc.safeTransferFrom(msg.sender, address(this), kncAmount);\n\n        uint256 kncBalanceBefore = getFundKncBalance();\n        _administerKncFee(kncAmount, FeeTypes.MINT);\n\n        _deposit(getAvailableKncBalance());\n\n        uint256 mintAmount = _calculateMintAmount(kncBalanceBefore);\n\n        emit MintWithKnc(msg.sender, kncAmount, mintAmount, block.timestamp);\n        return super._mint(msg.sender, mintAmount);\n    }\n\n    /*\n     * @notice Called by users burning their xKNC\n     * @dev Calculates pro rata KNC and redeems from Staking contract\n     * @dev: Exchanges for ETH if necessary and pays out to caller\n     * @param tokensToRedeem\n     * @param redeemForKnc bool: if true, redeem for KNC; otherwise ETH\n     * @param kyberProxy.getExpectedRate(knc => eth)\n     */\n    function _burn(\n        uint256 tokensToRedeem,\n        bool redeemForKnc,\n        uint256 minRate\n    ) external nonReentrant {\n        require(\n            balanceOf(msg.sender) >= tokensToRedeem,\n            \"Insufficient balance\"\n        );\n\n        uint256 proRataKnc = getFundKncBalance().mul(tokensToRedeem).div(\n            totalSupply()\n        );\n        _withdraw(proRataKnc);\n        super._burn(msg.sender, tokensToRedeem);\n\n        if (redeemForKnc) {\n            uint256 fee = _administerKncFee(proRataKnc, FeeTypes.BURN);\n            knc.safeTransfer(msg.sender, proRataKnc.sub(fee));\n        } else {\n            // safeguard to not overcompensate _burn sender in case eth still awaiting for exch to KNC\n            uint256 ethBalBefore = getFundEthBalance();\n            kyberProxy.swapTokenToEther(\n                ERC20(address(knc)),\n                getAvailableKncBalance(),\n                minRate\n            );\n\n            _administerEthFee(FeeTypes.BURN, ethBalBefore);\n\n            uint256 valToSend = getFundEthBalance().sub(ethBalBefore);\n            (bool success, ) = msg.sender.call.value(valToSend)(\"\");\n            require(success, \"Burn transfer failed\");\n        }\n\n        emit Burn(msg.sender, redeemForKnc, tokensToRedeem, block.timestamp);\n    }\n\n    /*\n     * @notice Calculates proportional issuance \n        according to KNC contribution\n     */\n    function _calculateMintAmount(uint256 kncBalanceBefore)\n        private\n        view\n        returns (uint256 mintAmount)\n    {\n        uint256 kncBalanceAfter = getFundKncBalance();\n        if (totalSupply() == 0)\n            return kncBalanceAfter.mul(INITIAL_SUPPLY_MULTIPLIER);\n\n        mintAmount = (kncBalanceAfter.sub(kncBalanceBefore))\n            .mul(totalSupply())\n            .div(kncBalanceBefore);\n    }\n\n    /*\n     * @notice KyberDAO deposit\n     */\n    function _deposit(uint256 amount) private {\n        kyberStaking.deposit(amount);\n    }\n\n    /*\n     * @notice KyberDAO withdraw\n     */\n    function _withdraw(uint256 amount) private {\n        kyberStaking.withdraw(amount);\n    }\n\n    /*\n     * @notice Vote on KyberDAO campaigns\n     * @dev Admin calls with relevant params for each campaign in an epoch\n     * @param DAO campaign ID\n     * @param Choice of voting option\n     */\n    function vote(uint256 campaignID, uint256 option) external onlyOwner {\n        kyberDao.vote(campaignID, option);\n    }\n\n    /*\n     * @notice Claim reward from previous epoch\n     * @notice All fee handlers should be called at once\n     * @dev Admin calls with relevant params\n     * @dev ETH/other asset rewards swapped into KNC\n     * @param epoch - KyberDAO epoch\n     * @param feeHandlerIndices - indices of feeHandler contract to claim from\n     * @param maxAmountsToSell - sellAmount above which slippage would be too high\n     * and rewards would redirected into KNC in multiple trades\n     * @param minRates - kyberProxy.getExpectedRate(eth/token => knc)\n     */\n    function claimReward(\n        uint256 epoch,\n        uint256[] calldata feeHandlerIndices,\n        uint256[] calldata maxAmountsToSell,\n        uint256[] calldata minRates\n    ) external onlyOwner {\n        require(\n            feeHandlerIndices.length == maxAmountsToSell.length,\n            \"Arrays must be equal length\"\n        );\n        require(\n            maxAmountsToSell.length == minRates.length,\n            \"Arrays must be equal length\"\n        );\n\n        uint256 ethBalBefore = getFundEthBalance();\n        for (uint256 i = 0; i < feeHandlerIndices.length; i++) {\n            kyberFeeHandlers[i].claimStakerReward(address(this), epoch);\n\n            if (kyberFeeTokens[i] == ETH_ADDRESS) {\n                emit EthRewardClaimed(\n                    getFundEthBalance().sub(ethBalBefore),\n                    block.timestamp\n                );\n                _administerEthFee(FeeTypes.CLAIM, ethBalBefore);\n            } else {\n                uint256 tokenBal = IERC20(kyberFeeTokens[i]).balanceOf(\n                    address(this)\n                );\n                emit TokenRewardClaimed(tokenBal, block.timestamp);\n            }\n\n            _unwindRewards(\n                feeHandlerIndices[i],\n                maxAmountsToSell[i],\n                minRates[i]\n            );\n        }\n\n        _deposit(getAvailableKncBalance());\n    }\n\n    /*\n     * @notice Called when rewards size is too big for the one trade executed by `claimReward`\n     * @param feeHandlerIndices - index of feeHandler previously claimed from\n     * @param maxAmountsToSell - sellAmount above which slippage would be too high\n     * and rewards would redirected into KNC in multiple trades\n     * @param minRates - kyberProxy.getExpectedRate(eth/token => knc)\n     */\n    function unwindRewards(\n        uint256[] calldata feeHandlerIndices,\n        uint256[] calldata maxAmountsToSell,\n        uint256[] calldata minRates\n    ) external onlyOwner {\n        for (uint256 i = 0; i < feeHandlerIndices.length; i++) {\n            _unwindRewards(\n                feeHandlerIndices[i],\n                maxAmountsToSell[i],\n                minRates[i]\n            );\n        }\n\n        _deposit(getAvailableKncBalance());\n    }\n\n    /*\n     * @notice Exchanges reward tokens (ETH, etc) for KNC\n     */\n    function _unwindRewards(\n        uint256 feeHandlerIndex,\n        uint256 maxAmountToSell,\n        uint256 minRate\n    ) private {\n        address rewardTokenAddress = kyberFeeTokens[feeHandlerIndex];\n\n        uint256 amountToSell;\n        if (rewardTokenAddress == ETH_ADDRESS) {\n            uint256 ethBal = getFundEthBalance();\n            if (maxAmountToSell < ethBal) {\n                amountToSell = maxAmountToSell;\n            } else {\n                amountToSell = ethBal;\n            }\n\n            _swapEtherToToken(address(knc), amountToSell, minRate);\n        } else {\n            uint256 tokenBal = IERC20(rewardTokenAddress).balanceOf(\n                address(this)\n            );\n            if (maxAmountToSell < tokenBal) {\n                amountToSell = maxAmountToSell;\n            } else {\n                amountToSell = tokenBal;\n            }\n\n            uint256 kncBalanceBefore = getAvailableKncBalance();\n\n            _swapTokenToToken(\n                rewardTokenAddress,\n                amountToSell,\n                address(knc),\n                minRate\n            );\n\n            uint256 kncBalanceAfter = getAvailableKncBalance();\n            _administerKncFee(\n                kncBalanceAfter.sub(kncBalanceBefore),\n                FeeTypes.CLAIM\n            );\n        }\n    }\n\n    function _swapEtherToToken(\n        address toAddress,\n        uint256 amount,\n        uint256 minRate\n    ) private {\n        kyberProxy.swapEtherToToken.value(amount)(ERC20(toAddress), minRate);\n    }\n\n    function _swapTokenToToken(\n        address fromAddress,\n        uint256 amount,\n        address toAddress,\n        uint256 minRate\n    ) private {\n        kyberProxy.swapTokenToToken(\n            ERC20(fromAddress),\n            amount,\n            ERC20(toAddress),\n            minRate\n        );\n    }\n\n    /*\n     * @notice Returns ETH balance belonging to the fund\n     */\n    function getFundEthBalance() public view returns (uint256) {\n        return address(this).balance.sub(withdrawableEthFees);\n    }\n\n    /*\n     * @notice Returns KNC balance staked to DAO\n     */\n    function getFundKncBalance() public view returns (uint256) {\n        return kyberStaking.getLatestStakeBalance(address(this));\n    }\n\n    /*\n     * @notice Returns KNC balance available to stake\n     */\n    function getAvailableKncBalance() public view returns (uint256) {\n        return knc.balanceOf(address(this)).sub(withdrawableKncFees);\n    }\n\n    function _administerEthFee(FeeTypes _type, uint256 ethBalBefore)\n        private\n        returns (uint256 fee)\n    {\n        if (!isWhitelisted(msg.sender)) {\n            uint256 feeRate = _getFeeRate(_type);\n            if (feeRate == 0) return 0;\n\n            fee = (getFundEthBalance().sub(ethBalBefore)).div(feeRate);\n            withdrawableEthFees = withdrawableEthFees.add(fee);\n        }\n    }\n\n    function _administerKncFee(uint256 _kncAmount, FeeTypes _type)\n        private\n        returns (uint256 fee)\n    {\n        if (!isWhitelisted(msg.sender)) {\n            uint256 feeRate = _getFeeRate(_type);\n            if (feeRate == 0) return 0;\n\n            fee = _kncAmount.div(feeRate);\n            withdrawableKncFees = withdrawableKncFees.add(fee);\n        }\n    }\n\n    function _getFeeRate(FeeTypes _type) private view returns (uint256) {\n        if (_type == FeeTypes.MINT) return feeDivisors[0];\n        if (_type == FeeTypes.BURN) return feeDivisors[1];\n        if (_type == FeeTypes.CLAIM) return feeDivisors[2];\n    }\n\n    /*\n     * @notice Called on initial deployment and on the addition of new fee handlers\n     * @param Address of KyberFeeHandler contract\n     * @param Address of underlying rewards token\n     */\n    function addKyberFeeHandler(\n        address _kyberfeeHandlerAddress,\n        address _tokenAddress\n    ) external onlyOwner {\n        kyberFeeHandlers.push(IKyberFeeHandler(_kyberfeeHandlerAddress));\n        kyberFeeTokens.push(_tokenAddress);\n\n        if (_tokenAddress != ETH_ADDRESS) {\n            _approveKyberProxyContract(_tokenAddress, false);\n        } else {\n            _addFallbackAllowedAddress(_kyberfeeHandlerAddress);\n        }\n    }\n\n    /* UTILS */\n\n    /*\n     * @notice Called by admin on deployment\n     * @dev Approves Kyber Staking contract to deposit KNC\n     * @param Pass _reset as true if resetting allowance to zero\n     */\n    function approveStakingContract(bool _reset) external onlyOwner {\n        uint256 amount = _reset ? 0 : MAX_UINT;\n        knc.approve(address(kyberStaking), amount);\n    }\n\n    /*\n     * @notice Called by admin on deployment for KNC\n     * @dev Approves Kyber Proxy contract to trade KNC\n     * @param Token to approve on proxy contract\n     * @param Pass _reset as true if resetting allowance to zero\n     */\n    function approveKyberProxyContract(address _token, bool _reset)\n        external\n        onlyOwner\n    {\n        _approveKyberProxyContract(_token, _reset);\n    }\n\n    function _approveKyberProxyContract(address _token, bool _reset) private {\n        uint256 amount = _reset ? 0 : MAX_UINT;\n        IERC20(_token).approve(address(kyberProxy), amount);\n    }\n\n    /*\n     * @notice Called by admin on deployment\n     * @dev (1 / feeDivisor) = % fee on mint, burn, ETH claims\n     * @dev ex: A feeDivisor of 334 suggests a fee of 0.3%\n     * @param feeDivisors[mint, burn, claim]:\n     */\n    function setFeeDivisors(uint256[] calldata _feeDivisors)\n        external\n        onlyOwner\n    {\n        require(\n            _feeDivisors[0] >= 100 || _feeDivisors[0] == 0,\n            \"Mint fee must be zero or equal to or less than 1%\"\n        );\n        require(\n            _feeDivisors[1] >= 100,\n            \"Burn fee must be equal to or less than 1%\"\n        );\n        require(_feeDivisors[2] >= 10, \"Claim fee must be less than 10%\");\n        feeDivisors = _feeDivisors;\n\n        emit FeeDivisorsSet(feeDivisors);\n    }\n\n    function withdrawFees() external onlyOwner {\n        uint256 ethFees = withdrawableEthFees;\n        uint256 kncFees = withdrawableKncFees;\n\n        withdrawableEthFees = 0;\n        withdrawableKncFees = 0;\n\n        (bool success, ) = msg.sender.call.value(ethFees)(\"\");\n        require(success, \"Burn transfer failed\");\n\n        knc.safeTransfer(owner(), kncFees);\n        emit FeeWithdraw(ethFees, kncFees, block.timestamp);\n    }\n\n    function addFallbackAllowedAddress(address _address) external onlyOwner {\n        _addFallbackAllowedAddress(_address);\n    }\n\n    function _addFallbackAllowedAddress(address _address) private {\n        fallbackAllowedAddress[_address] = true;\n    }\n\n    /*\n     * @notice Fallback to accommodate claimRewards function\n     */\n    function() external payable {\n        require(\n            fallbackAllowedAddress[msg.sender],\n            \"Only approved address can use fallback\"\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "@openzeppelin/contracts/lifecycle/Pausable.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../GSN/Context.sol\";\nimport \"../access/roles/PauserRole.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context, PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/roles/PauserRole.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"../Roles.sol\";\n\ncontract PauserRole is Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(_msgSender());\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Roles.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n * metering changes introduced in the Istanbul hardfork.\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}